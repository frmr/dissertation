#!/bin/bash

function fib {
    for N in {20..35}
    do
        for I in {1..1}
        do
            echo fib_serial n=$N i=$I
            echo $(./runm benchmarks/bin/fib/mic/fib_serial $N) >> results/fib/mic/fib_serial.csv

            for T in {1..240}
            do
                echo fib_cilk n=$N t=$T i=$I
                echo $(./runm benchmarks/bin/fib/mic/fib_cilk $N $T) >> results/fib/mic/fib_cilk.csv

                echo fib_omp_none n=$N t=$T i=$I
                export KMP_AFFINITY=none
                echo $(./runm benchmarks/bin/fib/mic/fib_omp $N $T) >> results/fib/mic/fib_omp_none.csv

                echo fib_omp_compact n=$N t=$T i=$I
                export KMP_AFFINITY=compact
                echo $(./runm benchmarks/bin/fib/mic/fib_omp $N $T) >> results/fib/mic/fib_omp_compact.csv

                echo fib_omp_scatter n=$N t=$T i=$I
                export KMP_AFFINITY=scatter
                echo $(./runm benchmarks/bin/fib/mic/fib_omp $N $T) >> results/fib/mic/fib_omp_scatter.csv

                echo fib_omp_balanced n=$N t=$T i=$I
                export KMP_AFFINITY=balanced
                echo $(./runm benchmarks/bin/fib/mic/fib_omp $N $T) >> results/fib/mic/fib_omp_balanced.csv
            done
        done
    done
}

function fib_cutoff {
    for N in {35..35}
    do
        for I in {1..1}
        do
            for C in {1..35}
            do
                echo fib_cutoff_cilk n=$N c=$C i=$I
                echo $(./runm benchmarks/bin/fib/mic/fib_cutoff_cilk $N 240 $C) >> results/fib/mic/fib_cutoff_cilk.csv

                echo fib_cutoff_omp_none n=$N c=$C i=$I
                export KMP_AFFINITY=none
                echo $(./runm benchmarks/bin/fib/mic/fib_cutoff_omp $N 240 $C) >> results/fib/mic/fib_cutoff_omp_none.csv

                echo fib_cutoff_omp_compact n=$N c=$C i=$I
                export KMP_AFFINITY=compact
                echo $(./runm benchmarks/bin/fib/mic/fib_cutoff_omp $N 240 $C) >> results/fib/mic/fib_cutoff_omp_compact.csv

                echo fib_cutoff_omp_scatter n=$N c=$C i=$I
                export KMP_AFFINITY=scatter
                echo $(./runm benchmarks/bin/fib/mic/fib_cutoff_omp $N 240 $C) >> results/fib/mic/fib_cutoff_omp_scatter.csv

                echo fib_cutoff_omp_balanced n=$N C=$C i=$I
                export KMP_AFFINITY=balanced
                echo $(./runm benchmarks/bin/fib/mic/fib_cutoff_omp $N 240 $C) >> results/fib/mic/fib_cutoff_omp_balanced.csv
            done
        done
    done
}

function msort {
    for N in {100000..3000000..100000}
    do
        for I in {1..1}
        do
            echo msort_serial n=$N i=$I
            echo $(./runm benchmarks/bin/msort/mic/msort_serial $N) >> results/msort/mic/msort_serial.csv

            for T in {1..240}
            do
                echo msort_cilk n=$N t=$T i=$I
                echo $(./runm benchmarks/bin/msort/mic/msort_cilk $N $T) >> results/msort/mic/msort_cilk.csv

                echo msort_omp_none n=$N t=$T i=$I
                export KMP_AFFINITY=none
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_omp_none.csv

                echo msort_omp_compact n=$N t=$T i=$I
                export KMP_AFFINITY=compact
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_omp_compact.csv

                echo msort_omp_scatter n=$N t=$T i=$I
                export KMP_AFFINITY=scatter
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_omp_scatter.csv

                echo msort_omp_balanced n=$N t=$T i=$I
                export KMP_AFFINITY=balanced
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_omp_balanced.csv
            done
        done
    done
}

function msort_powers {
    for N in 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304
    do
        for I in {1..1}
        do
            echo msort_serial n=$N i=$I
            echo $(./runm benchmarks/bin/msort/mic/msort_serial $N) >> results/msort/mic/msort_powers_serial.csv

            for T in {1..240}
            do
                echo msort_cilk n=$N t=$T i=$I
                echo $(./runm benchmarks/bin/msort/mic/msort_cilk $N $T) >> results/msort/mic/msort_powers_cilk.csv

                echo msort_omp_none n=$N t=$T i=$I
                export KMP_AFFINITY=none
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_powers_omp_none.csv

                echo msort_omp_compact n=$N t=$T i=$I
                export KMP_AFFINITY=compact
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_powers_omp_compact.csv

                echo msort_omp_scatter n=$N t=$T i=$I
                export KMP_AFFINITY=scatter
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_powers_omp_scatter.csv

                echo msort_omp_balanced n=$N t=$T i=$I
                export KMP_AFFINITY=balanced
                echo $(./runm benchmarks/bin/msort/mic/msort_omp $N $T) >> results/msort/mic/msort_powers_omp_balanced.csv
            done
        done
    done
}

function nqueens {
    for N in {2..13}
    do
        for I in {1..1}
        do
            echo nqueens_serial n=$N i=$I
            echo $(./runm benchmarks/bin/nqueens/mic/nqueens_serial $N) >> results/nqueens/mic/nqueens_serial.csv

            for T in {1..240}
            do
                echo nqueens_cilk n=$N t=$T i=$I
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_cilk $N $T) >> results/nqueens/mic/nqueens_cilk.csv

                echo nqueens_omp_none n=$N t=$T i=$I
                export KMP_AFFINITY=none
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_omp $N $T) >> results/nqueens/mic/nqueens_omp_none.csv

                echo nqueens_omp_compact n=$N t=$T i=$I
                export KMP_AFFINITY=compact
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_omp $N $T) >> results/nqueens/mic/nqueens_omp_compact.csv

                echo nqueens_omp_scatter n=$N t=$T i=$I
                export KMP_AFFINITY=scatter
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_omp $N $T) >> results/nqueens/mic/nqueens_omp_scatter.csv

                echo nqueens_omp_balanced n=$N t=$T i=$I
                export KMP_AFFINITY=balanced
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_omp $N $T) >> results/nqueens/mic/nqueens_omp_balanced.csv
            done
        done
    done
}

function nqueens_cutoff {
    for N in {13..13}
    do
        for I in {1..1}
        do
            for C in {0..13}
            do
                echo nqueens_cutoff_cilk n=$N c=$C i=$I
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_cutoff_cilk $N 240 $C) >> results/nqueens/mic/nqueens_cutoff_cilk.csv

                echo nqueens_cutoff_omp_none n=$N c=$C i=$I
                export KMP_AFFINITY=none
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_cutoff_omp $N 240 $C) >> results/nqueens/mic/nqueens_cutoff_omp_none.csv

                echo nqueens_cutoff_omp_compact n=$N c=$C i=$I
                export KMP_AFFINITY=compact
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_cutoff_omp $N 240 $C) >> results/nqueens/mic/nqueens_cutoff_omp_compact.csv

                echo nqueens_cutoff_omp_scatter n=$N c=$C i=$I
                export KMP_AFFINITY=scatter
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_cutoff_omp $N 240 $C) >> results/nqueens/mic/nqueens_cutoff_omp_scatter.csv

                echo nqueens_cutoff_omp_balanced n=$N C=$C i=$I
                export KMP_AFFINITY=balanced
                echo $(./runm benchmarks/bin/nqueens/mic/nqueens_cutoff_omp $N 240 $C) >> results/nqueens/mic/nqueens_cutoff_omp_balanced.csv
            done
        done
    done
}

function uts {
    source benchmarks/src/uts/sample_trees.sh
    for G in {1..10}
    do
        for I in {1..1}
        do
            echo uts_serial g=$G i=$I
            echo $(./runm benchmarks/bin/uts/mic/uts_serial $T1 -g $G) >> results/uts/mic/uts_serial.csv

            for T in {1..240}
            do
                echo uts_cilk g=$G t=$T i=$I
                echo $(./runm benchmarks/bin/uts/mic/uts_cilk $T1 -g $G -w $T) >> results/uts/mic/uts_cilk.csv

                echo uts_omp_none g=$G t=$T i=$I
                export KMP_AFFINITY=none
                echo $(./runm benchmarks/bin/uts/mic/uts_omp $T1 -g $G -w $T) >> results/uts/mic/uts_omp_none.csv

                echo uts_omp_compact g=$G t=$T i=$I
                export KMP_AFFINITY=compact
                echo $(./runm benchmarks/bin/uts/mic/uts_omp $T1 -g $G -w $T) >> results/uts/mic/uts_omp_compact.csv

                echo uts_omp_scatter g=$G t=$T i=$I
                export KMP_AFFINITY=scatter
                echo $(./runm benchmarks/bin/uts/mic/uts_omp $T1 -g $G -w $T) >> results/uts/mic/uts_omp_scatter.csv

                echo uts_omp_balanced g=$G t=$T i=$I
                export KMP_AFFINITY=balanced
                echo $(./runm benchmarks/bin/uts/mic/uts_omp $T1 -g $G -w $T) >> results/uts/mic/uts_omp_balanced.csv
            done
        done
    done
}

fib
fib_cutoff
msort
msort_powers
nqueens
nqueens_cutoff
uts
